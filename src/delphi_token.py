#!/usr/bin/python3
# -*- coding: utf-8 -*-

import re
import collections

keywords = ['ABSOLUTE',
            'ABSTRACT',
            'AND',
            'ARRAY',
            'AS',
            'ASM',
            'ASSEMBLER',
            'ASSEMBLY',
            'AT',
            'BEGIN',
            'CASE',
            'CDECL',
            'CLASS',
            'CONST',
            'CONSTRUCTOR',
            'CONTAINS',
            'DEFAULT',
            'DESTRUCTOR',
            'DISPID',
            'DISPINTERFACE',
            'DIV',
            'DO',
            'DOWNTO',
            'DYNAMIC',
            'ELSE',
            'END',
            'EXCEPT',
            'EXPORT',
            'EXPORTS',
            'EXTERNAL',
            'FAR',
            'FILE',
            'FINAL',
            'FINALIZATION',
            'FINALLY',
            'FOR',
            'FORWARD',
            'FUNCTION',
            'GOTO',
            'HELPER',
            'IF',
            'IMPLEMENTATION',
            'IMPLEMENTS',
            'IN',
            'INDEX',
            'INHERITED',
            'INITIALIZATION',
            'INLINE',
            'INTERFACE',
            'IS',
            'LABEL',
            'LIBRARY',
            'LOCAL',
            'MESSAGE',
            'MOD',
            'NAME',
            'NEAR',
            'NIL',
            'NODEFAULT',
            'NOT',
            'OBJECT',
            'OF',
            'ON',
            'OPERATOR',
            'OR',
            'OUT',
            'OVERLOAD',
            'OVERRIDE',
            'PACKAGE',
            'PACKED',
            'PASCAL',
            'PRIVATE',
            'PROCEDURE',
            'PROGRAM',
            'PROPERTY',
            'PROTECTED',
            'PUBLIC',
            'PUBLISHED',
            'RAISE',
            'READ',
            'READONLY',
            'RECORD',
            'REGISTER',
            'REINTRODUCE',
            'REPEAT',
            'REQUIRES',
            'RESOURCESTRING',
            'SAFECALL',
            'SEALED',
            'SET',
            'SHL',
            'SHR',
            'STATIC',
            'STDCALL',
            'STORED',
            'STRICT',
            'STRING',
            'THEN',
            'THREADVAR',
            'TO',
            'TRY',
            'TYPE',
            'UNIT',
            'UNTIL',
            'USES',
            'VAR',
            'VARARGS',
            'VIRTUAL',
            'WHILE',
            'WITH',
            'WRITE',
            'WRITEONLY',
            'XOR'
            ]

(COMMENT, FLOAT, KEYWORD, IDENTIFIER, INTEGER, NEWLINE, SKIP, STRING_LITERAL,
 SYMBOL_AMPERSAND, SYMBOL_ASSIGN, SYMBOL_ASTERISK, SYMBOL_AT,
 SYMBOL_CIRCUMFLEX, SYMBOL_COLON, SYMBOL_COMMA, SYMBOL_EQUALS, SYMBOL_PERIOD,
 SYMBOL_PLUS, SYMBOL_SEMICOLON, SYMBOL_SOLIDUS, SYMBOL_DOUBLE_PERIOD,
 SYMBOL_GREATER_THAN, SYMBOL_LEFT_BRACKET, SYMBOL_LEFT_PAREN,
 SYMBOL_LESS_THAN, SYMBOL_MINUS_SIGN, SYMBOL_NOT_EQUALS, SYMBOL_RIGHT_BRACKET,
 SYMBOL_RIGHT_PAREN, SYMBOL_GREATER_OR_EQUAL_THAN,
 SYMBOL_LESS_OR_EQUAL_THAN) = range(1, 32)

token_dict = {
    COMMENT:                      ('COMMENT',                      r'(//[^\n]*)|(\{.*?\})|(\(\*.*?\*\))'),
    SYMBOL_AMPERSAND:             ('SYMBOL_AMPERSAND',             r'&'),
    SYMBOL_LEFT_PAREN:            ('SYMBOL_LEFT_PAREN',            r'\('),
    SYMBOL_RIGHT_PAREN:           ('SYMBOL_RIGHT_PAREN',           r'\)'),
    SYMBOL_ASTERISK:              ('SYMBOL_ASTERISK',              r'\*'),
    SYMBOL_PLUS:                  ('SYMBOL_PLUS',                  r'\+'),
    SYMBOL_COMMA:                 ('SYMBOL_COMMA',                 r'\,'),
    SYMBOL_MINUS_SIGN:            ('SYMBOL_MINUS_SIGN',            r'\-'),
    SYMBOL_PERIOD:                ('SYMBOL_PERIOD',                r'\.'),
    SYMBOL_DOUBLE_PERIOD:         ('SYMBOL_DOUBLE_PERIOD',         r'\.\.'),
    SYMBOL_SOLIDUS:               ('SYMBOL_SOLIDUS',               r'/'),
    SYMBOL_COLON:                 ('SYMBOL_COLON',                 r':'),
    SYMBOL_ASSIGN:                ('SYMBOL_ASSIGN',                r':\='),
    SYMBOL_SEMICOLON:             ('SYMBOL_SEMICOLON',             r';'),
    SYMBOL_LESS_THAN:             ('SYMBOL_LESS_THAN',             r'\<'),
    SYMBOL_LESS_OR_EQUAL_THAN:    ('SYMBOL_LESS_OR_EQUAL_THAN',    r'\<\='),
    SYMBOL_NOT_EQUALS:            ('SYMBOL_NOT_EQUALS',            r'\<\>'),
    SYMBOL_EQUALS:                ('SYMBOL_EQUALS',                r'\='),
    SYMBOL_GREATER_THAN:          ('SYMBOL_GREATER_THAN',          r'\>'),
    SYMBOL_GREATER_OR_EQUAL_THAN: ('SYMBOL_GREATER_OR_EQUAL_THAN', r'\>\='),
    SYMBOL_AT:                    ('SYMBOL_AT',                    r'@'),
    SYMBOL_LEFT_BRACKET:          ('SYMBOL_LEFT_BRACKET',          r'\['),
    SYMBOL_RIGHT_BRACKET:         ('SYMBOL_RIGHT_BRACKET',         r'\]'),
    SYMBOL_CIRCUMFLEX:            ('SYMBOL_CIRCUMFLEX',            r'\^'),
    FLOAT:                        ('FLOAT',                        r'[-]?[0-9]*\.?[0-9]+(e[-+]?[0-9]+)?'),
    INTEGER:                      ('INTEGER',                      r'\-?[1-9]\d*'),
    KEYWORD:                      ('KEYWORD',                      '(' + '\\b|\\b'.join(keywords) + ')'),
    STRING_LITERAL:               ('STRING_LITERAL',               r'\'.*?\''),
    IDENTIFIER:                   ('IDENTIFIER',                   r'\w(\w|_|\d)*'),
    NEWLINE:                      ('NEWLINE',                      r'\n'),
    SKIP:                         ('SKIP',                         r'[ \t]')
}

pattern = '|'.join('(?P<%s>%s)' % pair for pair in (token_tuple for token_enum, token_tuple in token_dict.items()))
compiled_pattern = re.compile(pattern, re.IGNORECASE | re.DOTALL)
Token = collections.namedtuple('Token', 'type value line column')


def get_token_by_name(token_name):
    for token_enum in token_dict.keys():
        (token_str, regex) = token_dict[token_enum]
        if token_str == token_name:
            return token_enum


def get_token_name(token):
    (token_str, regex) = token_dict[token]
    return token_str
